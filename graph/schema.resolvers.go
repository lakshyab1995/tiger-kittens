package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
	"github.com/lakshyab1995/tiger-kittens/db"
	"github.com/lakshyab1995/tiger-kittens/graph/model"
	"github.com/lakshyab1995/tiger-kittens/jwt"
	"github.com/lakshyab1995/tiger-kittens/utils"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, password string, email string) (*model.User, error) {
	dbUser := &db.User{
		Username: username,
		Password: password,
		Email:    email,
		ID:       uuid.New().String(),
	}
	tokenModel, err := r.UserRepository.Create(dbUser)
	if err != nil {
		return nil, err
	}

	token := fmt.Sprintf("Bearer %s", tokenModel.Token)
	return &model.User{
		ID:       dbUser.ID,
		Username: dbUser.Username,
		Email:    dbUser.Email,
		Expiry:   &tokenModel.Expiry,
		Token:    &token,
	}, nil
}

// CreateTiger is the resolver for the createTiger field.
func (r *mutationResolver) CreateTiger(ctx context.Context, name string, dateOfBirth string, lastSeenTimestamp string, coordinates model.CoordinatesInput) (*model.Tiger, error) {
	if user := utils.ForContext(ctx); user == nil {
		return nil, fmt.Errorf("access denied")
	}

	// Parse the lastSeenTimestamp string into a time.Time value
	timestamp, err := time.Parse(time.RFC3339, lastSeenTimestamp)
	if err != nil {
		return nil, fmt.Errorf("invalid timestamp format: %w", err)
	}

	dbTiger := db.Tiger{
		Name:        name,
		DateOfBirth: dateOfBirth,
	}

	if err := r.TigerRepository.Create(&dbTiger); err != nil {
		log.Println(err)
		return nil, err
	}
	dbSight := &db.Sighting{
		TigerID:   dbTiger.ID,
		Timestamp: timestamp,
		Coordinates: db.Coordinates{
			Lat: coordinates.Lat,
			Lon: coordinates.Lon,
		},
	}
	r.SightRepository.Create(dbSight)

	return &model.Tiger{
		ID:                dbTiger.ID,
		Name:              dbTiger.Name,
		DateOfBirth:       dbTiger.DateOfBirth,
		LastSeenTimestamp: dbSight.Timestamp.Format(time.RFC3339),
		LastSeenCoordinates: &model.Coordinates{
			Lat: coordinates.Lat,
			Lon: coordinates.Lon,
		},
	}, nil
}

// CreateSighting is the resolver for the CreateSighting field.
func (r *mutationResolver) CreateSighting(ctx context.Context, tigerID int, timestamp string, coordinates model.CoordinatesInput, imageURL *string) (*model.Sighting, error) {
	lastSight, err := r.SightRepository.GetLastSighting(tigerID)
	if err != nil {
		return nil, err
	}

	// Check if the tiger is within 5 kilometers of its previous sighting
	if isWithinRange(coordinates, lastSight.Coordinates) {
		return nil, &TigerWithinRangeError{TigerID: tigerID}
	}

	// Parse the lastSeenTimestamp string into a time.Time value
	ts, err := time.Parse(time.RFC3339, timestamp)
	if err != nil {
		return nil, fmt.Errorf("invalid timestamp format: %w", err)
	}

	newSight := db.Sighting{
		TigerID:   tigerID,
		Timestamp: ts,
		Coordinates: db.Coordinates{
			Lat: coordinates.Lat,
			Lon: coordinates.Lon,
		},
		ImageURL: *imageURL,
	}

	if err := r.SightRepository.Create(&newSight); err != nil {
		return nil, err
	}

	return &model.Sighting{
		ID:        int(newSight.ID),
		TigerID:   newSight.TigerID,
		Timestamp: newSight.Timestamp.Format(time.RFC3339),
		Coordinates: &model.Coordinates{
			Lat: newSight.Coordinates.Lat,
			Lon: newSight.Coordinates.Lon,
		},
		ImageURL: &newSight.ImageURL,
	}, nil
}

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (*model.TokenMeta, error) {
	var user db.User
	user.Password = input.Password
	user.Username = input.Username
	isAuthenticated := r.UserRepository.AuthenticateUser(user.Username, user.Password)
	if !isAuthenticated {
		return nil, &WrongUsernameOrPasswordError{}
	}
	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return nil, err
	}
	return &model.TokenMeta{
		Token:  token.Token,
		Expiry: token.Expiry,
	}, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, token string) (*model.TokenMeta, error) {
	return RefreshToken(ctx, token)
}

// ListTigers is the resolver for the ListTigers field.
func (r *queryResolver) ListTigers(ctx context.Context, first *int, after *string) (*model.TigerConnection, error) {
	tigers, nextCursor, err := r.TigerRepository.List(first, after)
	if err != nil {
		return nil, err
	}

	edges := make([]*model.TigerEdge, len(tigers))
	for i, tiger := range tigers {
		sight, err := r.SightRepository.GetLastSighting(tiger.ID)
		if err != nil {
			log.Println(err)
			return nil, err
		}
		edges[i] = &model.TigerEdge{
			Node: &model.Tiger{
				ID:                tiger.ID,
				Name:              tiger.Name,
				DateOfBirth:       tiger.DateOfBirth,
				LastSeenTimestamp: sight.Timestamp.Format(time.RFC3339),
				LastSeenCoordinates: &model.Coordinates{
					Lat: sight.Coordinates.Lat,
					Lon: sight.Coordinates.Lon,
				},
			},
			Cursor: EncodeCursor(tiger.ID),
		}
	}

	return &model.TigerConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			HasNextPage: nextCursor != nil,
			EndCursor:   nextCursor,
		},
	}, nil
}

// ListSightings is the resolver for the ListSightings field.
func (r *queryResolver) ListSightings(ctx context.Context, tigerID int, first *int, after *string) (*model.SightingConnection, error) {
	sightings, nextCursor, err := r.SightRepository.GetAllSightings(tigerID, first, after)
	if err != nil {
		return nil, err
	}

	edges := make([]*model.SightingEdge, len(sightings))
	for i, sighting := range sightings {
		edges[i] = &model.SightingEdge{
			Node: &model.Sighting{
				ID:        int(sighting.ID),
				TigerID:   sighting.TigerID,
				Timestamp: sighting.Timestamp.Format(time.RFC3339),
				Coordinates: &model.Coordinates{
					Lat: sighting.Coordinates.Lat,
					Lon: sighting.Coordinates.Lon,
				},
				ImageURL: &sighting.ImageURL,
			},
			Cursor: EncodeCursor(int(sighting.ID)),
		}
	}

	return &model.SightingConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			HasNextPage: nextCursor != nil,
			EndCursor:   nextCursor,
		},
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
