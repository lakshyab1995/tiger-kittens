package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/lakshyab1995/tiger-kittens/graph/model"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, password string, email string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - CreateUser"))
}

// CreateTiger is the resolver for the createTiger field.
func (r *mutationResolver) CreateTiger(ctx context.Context, name string, dateOfBirth string, lastSeenTimestamp string, coordinates model.CoordinatesInput) (*model.Tiger, error) {
	panic(fmt.Errorf("not implemented: CreateTiger - createTiger"))
}

// CreateSighting is the resolver for the CreateSighting field.
func (r *mutationResolver) CreateSighting(ctx context.Context, tigerID int, timestamp string, coordinates model.CoordinatesInput, imageURL *string) (*model.Sighting, error) {
	panic(fmt.Errorf("not implemented: CreateSighting - CreateSighting"))
}

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (*model.TokenMeta, error) {
	panic(fmt.Errorf("not implemented: Login - Login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, token string) (*model.TokenMeta, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// ListTigers is the resolver for the listTigers field.
func (r *queryResolver) ListTigers(ctx context.Context, first *int, after *string) (*model.TigerConnection, error) {
	panic(fmt.Errorf("not implemented: ListTigers - listTigers"))
}

// ListSightings is the resolver for the ListSightings field.
func (r *queryResolver) ListSightings(ctx context.Context, tigerID int, first *int, after *string) (*model.SightingConnection, error) {
	panic(fmt.Errorf("not implemented: ListSightings - ListSightings"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
