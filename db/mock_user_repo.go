// Code generated by MockGen. DO NOT EDIT.
// Source: user_repo.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jwt "github.com/lakshyab1995/tiger-kittens/jwt"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockUserRepository) AuthenticateUser(username, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", username, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockUserRepositoryMockRecorder) AuthenticateUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockUserRepository)(nil).AuthenticateUser), username, password)
}

// Create mocks base method.
func (m *MockUserRepository) Create(user *User) (*jwt.TokenModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*jwt.TokenModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), user)
}

// GetUsrIdByUsername mocks base method.
func (m *MockUserRepository) GetUsrIdByUsername(username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsrIdByUsername", username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsrIdByUsername indicates an expected call of GetUsrIdByUsername.
func (mr *MockUserRepositoryMockRecorder) GetUsrIdByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsrIdByUsername", reflect.TypeOf((*MockUserRepository)(nil).GetUsrIdByUsername), username)
}
